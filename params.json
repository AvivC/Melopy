{"name":"Melopy","body":"# Melopy (melo-pee)\r\n\r\n#### A python library for playing with sound.\r\n#### by Jordan Scales (http://jordanscales.com) and friends\r\n#### on Github: http://github.com/prezjordan/Melopy\r\n\r\nTo install:\r\n\r\n    $ git clone git://github.com/prezjordan/Melopy\r\n    $ cd Melopy\r\n    $ python setup.py install\r\n\r\nFor examples, check out the `examples` directory:\r\n\r\n    $ python examples/canon.py\r\n    $ python examples/parser.py entertainer < examples/meeps/entertainer.mp\r\n\r\nTo run the tests: (we've got some errors to work out)\r\n\r\n    $ python setup.py test\r\n\r\nor:\r\n\r\n    $ pip install -r requirements.txt\r\n    $ nosetests\r\n\r\n## Organization\r\n\r\nMelopy is broken down into 3 subcategories - `melopy`, `scales`, and `utility`.\r\n\r\n* `melopy.py` contains the Melopy class\r\n    * this is used for creating a Melopy and adding notes to it, rendering, etc\r\n* `scales.py` contains methods for generating scales\r\n    * for instance, if you want to store the C major scale in an array\r\n* `utility.py` contains methods for finding frequencies of notes, etc\r\n\r\n## melopy.py\r\n\r\n```\r\n>>> from melopy import Melopy\r\n>>> m = Melopy('mysong')\r\n>>> m.add_quarter_note('A4')\r\n>>> m.add_quarter_note('C#5')\r\n>>> m.add_quarter_note('E5')\r\n>>> m.render()\r\n[==================================================] 100%\r\nDone\r\n```\r\n\r\n## scales.py\r\n\r\n* chromatic_scale\r\n* harmonic_minor_scale\r\n* major_pentatonic_scale\r\n* major_scale\r\n* minor_scale\r\n* major_triad\r\n* minor_triad\r\n* melodic_minor_scale\r\n* minor_pentatonic_scale\r\n\r\n```\r\n>>> from melopy.scales import *\r\n>>> major_scale('C4')\r\n['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4']\r\n>>> major_scale('C4','dict')\r\n{0: 'C4', 1: 'D4', 2: 'E4', 3: 'F4', 4: 'G4', 5: 'A4', 6: 'B4'}\r\n>>> major_scale('C4','tuple')\r\n('C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4')\r\n>>> minor_scale('D#5')  # has some bugs\r\n['D#5', 'F5', 'F#5', 'G#5', 'A#5', 'B5', 'C#6']\r\n>>> major_triad('A4')\r\n['A4', 'C#5', 'E5']\r\n>>> major_triad('A4', 'tuple')\r\n('A4', 'C#5', 'E5')\r\n```\r\n\r\n## utility.py\r\n\r\n* key_to_frequency\r\n* key_to_note\r\n* note_to_frequency\r\n* note_to_key\r\n* frequency_to_key\r\n* frequency_to_note\r\n\r\n```\r\n>>> from melopy.utility import *\r\n>>> key_to_frequency(49)\r\n440.0\r\n>>> note_to_frequency('A4')\r\n440.0\r\n>>> note_to_frequency('C5')\r\n523.2511306011972\r\n>>> note_to_key('Bb5')\r\n62\r\n>>> key_to_note(65)\r\n'C#6'\r\n>>> key_to_note(304) # even something stupid\r\n'C26'\r\n>>> frequency_to_key(660)\r\n56\r\n>>> frequency_to_note(660)\r\n'E5'\r\n```\r\n\r\n## TODO\r\n* Get on PyPI\r\n* Create project page\r\n* Write to wav file bitwise? Rather than having an overhead\r\n* Add option to listen to files before rendering out (Render into RAM, play and then dump?)","tagline":"Python music library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}